{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "ResourcesName": {
      "type": "string",
      "defaultValue": "ontologies",
      "minLength": 2,
      "metadata": {
        "description": "Name of resources to be deployed."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
    "adminPassword": {
      "type": "secureString",
      "minLength": 12,
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    }
  },
  "variables": {
    "addressPrefix": "10.0.0.0/16",
    "subnetPrefix": "10.0.0.0/24",
    "dataOwnerRoleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'bcd981a7-7f74-457b-83e1-cceb9e632ffe')]"
  },
  "resources": [
    {
      "type": "Microsoft.DigitalTwins/digitalTwinsInstances",
      "apiVersion": "2020-10-31",
      "name": "[parameters('ResourcesName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "privateEndpointConnections": [],
        "publicNetworkAccess": "Enabled"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-02-01",
      "name": "[parameters('ResourcesName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "P2v2",
        "tier": "PremiumV2",
        "size": "P2v2",
        "family": "Pv2",
        "capacity": 1
      },
      "kind": "linux",
      "properties": {
        "perSiteScaling": false,
        "elasticScaleEnabled": false,
        "maximumElasticWorkerCount": 1,
        "isSpot": false,
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0,
        "zoneRedundant": false
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-02-01",
      "name": "[parameters('ResourcesName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "httpsOnly": true,
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('ResourcesName'))]",
        "siteConfig": {
          "numberOfWorkers": 1,
          "linuxFxVersion": "DOCKER|ghcr.io/digitaltwinconsortium/ua-cloudtwin:main",
          "minTlsVersion": "1.2",
          "ftpsState": "FtpsOnly",
          "acrUseManagedIdentityCreds": false,
          "alwaysOn": true,
          "http20Enabled": false,
          "functionAppScaleLimit": 0,
          "minimumElasticInstanceCount": 0
        }
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', parameters('ResourcesName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-04-01",
      "name": "[parameters('ResourcesName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "Storage"
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-11-01",
      "name": "[parameters('ResourcesName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Basic"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[parameters('ResourcesName')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-11-01",
      "name": "[parameters('ResourcesName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "default-allow-3389",
            "properties": {
              "priority": 1000,
              "access": "Allow",
              "direction": "Inbound",
              "destinationPortRange": "3389",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-11-01",
      "name": "[parameters('ResourcesName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('ResourcesName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('ResourcesName'))]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('ResourcesName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-11-01",
      "name": "[parameters('ResourcesName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('ResourcesName'))]"
              },
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('ResourcesName'), parameters('ResourcesName'))]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('ResourcesName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('ResourcesName'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2021-03-01",
      "name": "[parameters('ResourcesName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_D4s_v3"
        },
        "osProfile": {
          "computerName": "[parameters('ResourcesName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsDesktop",
            "offer": "Windows-10",
            "sku": "20h2-pro-g2",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage",
            "caching": "ReadWrite",
            "managedDisk": {
              "storageAccountType": "Premium_LRS"
            },
            "deleteOption": "Delete",
            "diskSizeGB": 127
          },
          "dataDisks": []
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('ResourcesName'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('ResourcesName'))).primaryEndpoints.blob]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', parameters('ResourcesName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('ResourcesName'))]"
      ]
    },
    {
      "name": "[parameters('ResourcesName')]",
      "type": "Microsoft.Kusto/clusters",
      "sku": {
        "name": "Standard_E8a_v4",
        "tier": "Standard",
        "capacity": 2
      },
      "apiVersion": "2021-01-01",
      "location": "[resourceGroup().location]",
      "tags": {
        "Created By": "GitHub quickstart template"
      },
      "properties": {
        "trustedExternalTenants": [
          {
            "value": "*"
          }
        ],
        "enableDiskEncryption": false,
        "enableStreamingIngest": true,
        "enablePurge": false,
        "enableDoubleEncryption": false,
        "engineType": "V3"
      }
    },
    {
      "name": "[concat(parameters('ResourcesName'), '/', parameters('ResourcesName'))]",
      "type": "Microsoft.Kusto/clusters/databases",
      "apiVersion": "2021-01-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Kusto/clusters', parameters('ResourcesName'))]"
      ],
      "properties": {
        "softDeletePeriodInDays": 365,
        "hotCachePeriodInDays": 31
      },
      "kind": "ReadWrite"
    },
    {
      "type": "Microsoft.EventHub/namespaces",
      "apiVersion": "2017-04-01",
      "name": "[parameters('ResourcesName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard",
        "tier": "Standard",
        "capacity": 1
      },
      "properties": {
        "isAutoInflateEnabled": true,
        "maximumThroughputUnits": 16
      }
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "apiVersion": "2017-04-01",
      "name": "[concat(parameters('ResourcesName'), '/adthistory')]",
      "properties": {
        "messageRetentionInDays": 1,
        "partitionCount": 1
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', parameters('ResourcesName'))]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "apiVersion": "2017-04-01",
      "name": "[concat(parameters('ResourcesName'), '/commands')]",
      "properties": {
        "messageRetentionInDays": 1,
        "partitionCount": 1
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', parameters('ResourcesName'))]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "apiVersion": "2017-04-01",
      "name": "[concat(parameters('ResourcesName'), '/response')]",
      "properties": {
        "messageRetentionInDays": 1,
        "partitionCount": 1
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', parameters('ResourcesName'))]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "apiVersion": "2017-04-01",
      "name": "[concat(parameters('ResourcesName'), '/data')]",
      "properties": {
        "messageRetentionInDays": 1,
        "partitionCount": 1
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', parameters('ResourcesName'))]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "apiVersion": "2017-04-01",
      "name": "[concat(parameters('ResourcesName'), '/metadata')]",
      "properties": {
        "messageRetentionInDays": 1,
        "partitionCount": 1
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', parameters('ResourcesName'))]"
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "name": "[parameters('ResourcesName')]",
      "apiVersion": "2018-11-30",
      "location": "[resourceGroup().location]"
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[parameters('ResourcesName')]",
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('ResourcesName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[variables('dataOwnerRoleDefinitionId')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('ResourcesName')), '2018-11-30').principalId]",
        "principalType": "ServicePrincipal"
      }
    }
  ],
  "outputs": {
    "hostname": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('ResourcesName'))).dnsSettings.fqdn]"
    }
  }
}
